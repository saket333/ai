def hill_climbing_min_cost(cost):
    n = len(cost)
    
    if n == 0:
        return 0
    if n == 1:
        return cost[0]
    
    cost_from_start = [float('inf')] * n
    cost_from_start[0] = cost[0]
    cost_from_start[1] = cost[1]
    
    i = 0
    while i < n:
        if i + 1 < n:
            cost_from_start[i + 1] = min(cost_from_start[i + 1], cost_from_start[i] + cost[i + 1])
        if i + 2 < n:
            cost_from_start[i + 2] = min(cost_from_start[i + 2], cost_from_start[i] + cost[i + 2])
        i += 1
    
    return min(cost_from_start[n - 1], cost_from_start[n - 2])

# Test the function
cost = [10, 15, 20]
print(hill_climbing_min_cost(cost))
